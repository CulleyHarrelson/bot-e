extends layout
block meta
    if !answer
      meta(http-equiv="refresh" content="20")
    meta(property="og:title" content=title)
    meta(property="og:description" content=description)
    meta(property="og:image" content=image_url)
    meta(property="og:url" content=`https://bot-e.com/question/${question_id}`)
    meta(name="twitter:card" content=description)
    meta(name="twitter:title" content=title)
    meta(name="twitter:description" content=description)
    meta(name="twitter:image" content=image_url)
mixin navButtons
  .card
    .card-divider
      | View Another Question
      .card-section
    form(id="question-form" method="post" action="")
        input(type="hidden", name="question_id", value=questionId)
        input(type="hidden", name="session_id", value=session_id)
        .grid-x.grid-margin-x.align-middle(style="padding-top: 10px;")
          .cell.medium-4.text-center
            button.button(type="button", name="direction" value="down", class="g-recaptcha", data-sitekey="6Le7yP8nAAAAAPUOVGZ9Xfu95Nco8h0vmUhUZ0u3", data-callback='onSubmitDown', data-tooltip, tabindex="3", title="Show me something else, not like this question.") Show me Something Different

          .cell.medium-4.text-center
            button.button(type="button", name="direction" value="random", class="g-recaptcha", data-sitekey="6Le7yP8nAAAAAPUOVGZ9Xfu95Nco8h0vmUhUZ0u3", data-callback='onSubmitRandom', data-tooltip, tabindex="2", title="Show a Random Question")
              | View Random Question

          .cell.medium-4.text-center
            button.button(type="button", name="direction" value="up", class="g-recaptcha", data-sitekey="6Le7yP8nAAAAAPUOVGZ9Xfu95Nco8h0vmUhUZ0u3", data-callback='onSubmitUp', data-tooltip, tabindex="1", title="Show me more questions like this one.") Show me Something Similar

  script.
    function submitForm(direction, token, redirect) {
      const questionId = document.querySelector('input[name="question_id"]').value;
      const sessionId = document.querySelector('input[name="session_id"]').value;
      const formData = new FormData();
      formData.append('direction', direction);
      formData.append('question_id', questionId);
      formData.append('session_id', sessionId);
      formData.append('recaptcha_token', token); 

      fetch('/navigate', { 
        method: 'POST',
        body: JSON.stringify(Object.fromEntries(formData)),
        headers: {
          'Content-Type': 'application/json', // Set the content type to JSON
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (redirect){
            window.location.href = '/question/' + data['question_id'];
          } else {
            showCallout("thank you for voting", "primary");
          }
        } else {
          // reCAPTCHA verification failed, display an error or take appropriate action
          console.error('reCAPTCHA verification failed');
        }
      })
      .catch(error => {
        console.debug('Error:', error);
      });
    }

    function onSubmitDown(token) {
      submitForm('down', token, true);
    }

    function onLike(token) {
      submitForm('up', token, false);
    }

    function onDislike(token) {
      submitForm('down', token, false);
    }

    function onSubmitRandom(token) {
      submitForm('random', token, true);
    }

    function onSubmitUp(token) {
      submitForm('up', token, true);
    }


block content
  script.
      function showCallout(message, messageType) {
        const notice = document.createElement('div');
        notice.textContent = message;
        notice.classList.add('callout', messageType);
        const calloutContainer = document.getElementById('callout');

        if (calloutContainer) {
          calloutContainer.appendChild(notice);
          setTimeout(() => {
            calloutContainer.removeChild(notice);
          }, 3000);
        } else {
          console.error('Callout container with id "callout_id" not found.');
        }
      }
  if error
    .error-shoutout
      p Error: #{error}

  style.
    .custom-icon {
      font-size: 24px;
    }
  if !answer
    style.
      /* Define keyframes for the animation */
      @keyframes progress-animation {
        0% {
          width: 0;
        }
        100% {
          width: 100%;
        }
      }

      /* Apply the animation to the progress bar */
      .progress-meter-animated {
        animation-name: progress-animation;
        animation-timing-function: linear;
        animation-fill-mode: forwards; /* Keep the final style after animation */
      }

      /* Style the container as needed */
      .progress-container {
        width: 100%;
        height: 20px; /* Adjust height as needed */
        background-color: #f0f0f0;
        border-radius: 5px;
        overflow: hidden; /* Hide overflowing content during animation */
      }

    script.
      document.addEventListener("DOMContentLoaded", function () {
        var progressMeter = document.querySelector(".progress-meter");
        progressMeter.style.animationDuration = "20s";
        // Start the animation by adding the animated class
        progressMeter.classList.add("progress-meter-animated");
      });
  +topBar
  script.
  .flex-container.align-center.margin-3
    .small-up-1.medium-up-2
      if !answer
        .card(id="answerCard")
          .card-divider
            | Answer
          .card-section(id="answer", name="answer")
            p.cell.small-12 It can take a minute to generate a response - this is actually a special moment.
            .cell.small-12
              .progress-container
                .progress-meter(role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuetext="100 percent" aria-valuemax="100")
                  span.progress-meter-text
            .cell.small-12
              div.text-center 
                div(style="padding-top: 20px;") 
                  img(id="waitingGif" src="" alt="waiting image")
                  script.
                    const gif_codes = ['l0HlBO7eyXzSZkJri', 'QPQ3xlJhqR1BXl89RG', '26BRuo6sLetdllPAQ', 'SWVzkIlHdEckF81gnA', 'PCvkgunX9ZbEEyfTQH', 'tXL4FHPSnVJ0A', 'ohdmJuMIE08Ld7Jj0s', 'FoH28ucxZFJZu', 'QhjR3MG9ZFfjB6BtIZ', '229Pljon180JF07BaX', 'wbXkGmM7YMgpCggnPB', '26his5i9YJTqsqCyY', 'QBd2kLB5qDmysEXre9', 'IcoMfdWwY26mBcX008', '2tOsjtp4xFgD6pc48U', '4SY40ExbxfyOyD91VI', 'PWfHC8ogZpWcE', 'hCiQVo1dzVwPu', 'Qt1jk5Q49C3h5CrlBe', 'lP4jmO461gq9uLzzYc', 'J6ctgPvnDpDi0', '2WGDUTmsB4DzFuvZ2t', 'u5eXlkXWkrITm', 'd2qJhxeaaWXPG', 'hFmIU5GQF18Aw', 'QUmpqPoJ886Iw', 'MgRKCBGvlpqTENUzWk', 'ZXKZWB13D6gFO', 'xf20D8HzvTQzu', 'ZR8teuiCs3AkSkzjnG', 'deamFJOd89iTk0xYpR', 'HxPx004f5fFXhpQDvH', '3kACvwjyzgOdqE3GWT', 'GiWEowj3nQv9C', 'E4pi99w43ecCV1n9jF', '7zrZAg61HEsYDmOvto', 'F77lbfwEAnYNG', 'ZcnwOpPTw9Ucw', 'BAYZwXqJ3zQnC', '26n6xBpxNXExDfuKc', 'QHtZ75OT07KKKxLuJ5', 'xA1PKCt00IDew', '3oriNSGVr5DmGh6ZTq', 'l0ExtLXXJ5FiBozPa', '3otPouzI8Zjnpc08RG', 'l4HnKwiJJaJQB04Zq', '2fjjoFrNS4XzW', 'xUPGcdy9cg74187mco', 'gZ0GEz2HefV4s', '3o85xscgnCWS8Xxqik', 'hiu4RJvbEBUVq', 'o3yJlZPX0uV4fkGfvd', 'a6HJquvTVsBws', 'SiM5c8aqHwqcfD9JIG', 'j9UHmOnjCNrIDZRoTe', '1wq8UZXyxY4UiiovWP', 'kVRBvsiOyBM8o', '3o7TKxOhkp8gO0LXMI', '3oz8xwjA7yu1VGIaac', 'xTiTnirBmnXzvbCzHG', 'aqFRBqGjnznd6', '3orieVVxVESoH7f5yo', '13uaMxgBhGP9ba', 'l5u6SuofjVf56', 'l3q2NsJfJxVuOv3by', 'KGHua3DXhxTS4MBHrK', 'YpxH6P6nnyV7yWapGa', 'poLAPeLtXo778QhYIy', 'T99wGqreuiWFc83NU2', 'YZFO68qCW9KtG', 'RPhZ5IZfA7Ia7kyApl', 'l0MYRfGACGXlqL86A', '10LCn5MSXM8d3O', 'KAnPj9HruovDi', '3oEdv9pgtUVVYdpaY8', 'bCwB9W585jiYU', '10THtJ9zWzPDQQ', 'SPwq6rg2vcig8', 'phY1SBXy4y4Io', 'gKIyqq4JESg4p3RW8V', 'Ep8H7w4ayN2k3XWz2x', 'OD2h5eK4XZI5yQ8iQo', 'xT9IgAr64UiCRYbKco', 'xT0BKtgZQfFRB8pegg', 'OlUenwp8CJCSs', 'RMhbmeqWeOBQIiQkS4', 'elbWbddr5N0banciNY', '5xaOcLvROln5TmaaVOM', 'AMSUrxqH4vxPW', '3o6ZtrcvLygH8a5qi4', 'Y1C26dVWOOz1C', '1pR5R2WMCoMcU', 'l3V0Brmdx3M7xqFiw', 'esUOS8Ztwlifu', 'SQw2RHDXvyswIA9FSl', 'OXDpkxTD2l9Icnqh6h', 'YnbGO92dcuCZ0kxWBj', 'xTiTntUt0miqJ4dvnW', 'zOD5XeexlbCoFWynhy', 'l2Sq7TXCIXsZV7n1K', 'l4Epl2MzXZW4mF15K', 'xUOwGj1jwTZq5Kh3Ko', 'xT8qB4EPeaBKjjYbZu', 'wzXrZ11zwTOMeLDYjI', 'pIEslLgiW7W0Wg0cgt', '4T9dXcA0mWnUPr6tcD', 'tU6zyp5ly12bm', '3ov9k6lsQ9kW7K30eQ', 'G8JShyA70Eh7G', 'l0HU3rCbqtK6xMi3K', '3o6gaXGkCL4WJW4Ap2', 'l3JDHv2xpLbQ7Tjdm', 'l0EwYmFzBJLBcbWgM', '26gR1iYzSqtzcta4E', 'gAkByFVxQx70c', 'J0IZzqRxvrcmdZ4LgD', 'MEF1VadKbQBdmd8LCn', 'YaO800uS4DjRNgjQWh', 'jFBDPMTZUFvt4N6mli', 'oW7cXqaVmt5EKQ48FQ', 'chbs0iCIdvbGirfLyv', 'l46CeDBwmtMi1ddkc', 'Hz2yOhN7Aapqnio0cb', 'ZA0GUadZdAqyWyUGdg', 'qSYeGGz7DtDEo9Htk0', 'BDQmMy3ZM8sgRNFkhe', 'l2JhtCMwgCLcRXmgg', '6vocLZfWqCexRghW6W', 'sthmCnCpfr8M8jtTQy', 'iAqP1YFX53Oh2', '2uwZ4xi75JhxZYeyQB', '3s4utjscHJjknwyIMw', '7aFDGPdxGLuEg', 'lGa9b9ciMpSOaAjQGU', 'BeaNh7I13Hur46xHCv', 'l0MYOw8BXSIoeXVFC'];
                    function getRandomGifCode() {
                      const randomIndex = Math.floor(Math.random() * gif_codes.length);
                      return gif_codes[randomIndex];
                    }

                    function replaceImageSrc(gif_code) {
                      const baseUrl = 'https://media.giphy.com/media/';
                      const imageUrl = baseUrl + gif_code + '/giphy.gif';
                      
                      // Replace the src attribute of the image with the new URL
                      const imageElement = document.getElementById('waitingGif');
                      if (imageElement) {
                        imageElement.src = imageUrl;
                      } else {
                        console.error('Image element not found.');
                      }
                    }

                    const initialGifCode = getRandomGifCode();
                    replaceImageSrc(initialGifCode);

                    setInterval(() => {
                      const randomGifCode = getRandomGifCode();
                      replaceImageSrc(randomGifCode);
                    }, 5000);

                

        .card
          .card-divider
            | Question
          .card-section
            .row
            p !{question}
      else
        .card
          .card-section
            h4 !{title}
            if image_url
              img(id=question_image, src=image_url width=256 height=256 alt=title)
        .card
          .card-divider
            | Question
          .card-section
            p !{question}
        .card(id="answer")
          .card-divider 
            | Answer
          div.grid-x(id="callout")
            div.cell.small-10
            div.cell.small-1.text-right
              button.button.unstyled.hollow.clear(type='submit', class='button float-right g-recaptcha', data-sitekey="6Le7yP8nAAAAAPUOVGZ9Xfu95Nco8h0vmUhUZ0u3", data-callback='onLike', data-tooltip, title="thumbs up")
                i.h4.fi-like
            div.cell.small-1.text-right
              button.button.unstyled.hollow.clear(type='submit', class='button float-right g-recaptcha', data-sitekey="6Le7yP8nAAAAAPUOVGZ9Xfu95Nco8h0vmUhUZ0u3", data-callback='onDislike', data-tooltip, title="thumbs down")
                i.h4.fi-dislike
          .card-section
            p !{answer}
        +navButtons
        .card
          .card-divider
            | Comments
          .card-section
            .row(id="callout")
            .row
              .small-12.columns
                form
                  .row
                    .small-12.medium-10.columns
                      input(type='text', id='comment', placeholder='Enter your comment', name='comment')
                    .small-12.medium-2.columns 
                      button(type='submit', class='button float-right g-recaptcha', data-sitekey="6Le7yP8nAAAAAPUOVGZ9Xfu95Nco8h0vmUhUZ0u3", data-callback='onCommentAdd', data-tooltip, tabindex="1", title="Show me more questions like this one.") Add Comment
                    script.
                      function formatDate() {
                        const now = new Date();
                        return now.toLocaleString('en-US', {
                          year: 'numeric',
                          month: '2-digit',
                          day: '2-digit',
                          hour: '2-digit',
                          minute: '2-digit',
                        });
                      }
                      function onCommentAdd(token) {
                        const commentInput = document.querySelector('input[name="comment"]');
                        const comment = commentInput.value.trim(); // Trim whitespace

                        if (!comment) {
                          // TODO: change the notification method
                          alert('Please enter your comment.');
                          commentInput.focus(); // Put cursor in the comment input
                          return;
                        }
                        //const comment = document.querySelector('input[name="comment"]').value;
                        const questionId = document.querySelector('input[name="question_id"]').value;
                        const sessionId = document.querySelector('input[name="session_id"]').value;

                        const formData = new FormData();
                        formData.append('comment', comment);
                        formData.append('question_id', questionId);
                        formData.append('session_id', sessionId);
                        formData.append('recaptcha_token', token); 

                        fetch('/comment', { 
                          method: 'POST',
                          body: JSON.stringify(Object.fromEntries(formData)),
                          headers: {
                            'Content-Type': 'application/json', 
                          }
                        })
                        .then(response => response.json())
                        .then(data => {
                          if (data.success) {
                            const commentRow = document.getElementById('comment-row');
                            const newParagraph = document.createElement('p');
                            newParagraph.innerHTML = '<i>' + formatDate() + ' - ' + comment + '</i>';
                            const existingContent = commentRow.innerHTML;
                            commentRow.innerHTML = newParagraph.outerHTML + existingContent;
                            commentInput.value = '';
                          } else {
                            showCallout(data.error, 'error')
                          }
                        })
                        .catch(error => {
                          showCallout('reCAPTCHA verification failed 2', 'error')
                        });
                      }
                  .row(id='comment-row')
                    each comment in comments
                      p 
                        i !{comment.added_at} - !{comment.comment}
                    

  if !answer
    script.
      question_id = "#{questionId}";
      fetch('/respond', { 
        method: 'POST',
        body: JSON.stringify({'question_id': question_id}),
        headers: {
          'Content-Type': 'application/json', 
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.reload();
        } else {
          showCallout(data.error, 'error')
        }
      })
      .catch(error => {
        showCallout('response failed', 'error')
      });
  else if !image_url
    script.
      question_id = "#{questionId}";
      fetch('/respond', { 
        method: 'POST',
        body: JSON.stringify({'question_id': question_id, 'enrich': question_id}),
        headers: {
          'Content-Type': 'application/json', 
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.reload();
        } else {
          showCallout(data.error, 'error')
        }
      })
      .catch(error => {
        showCallout('response failed', 'error')
      });
  +siteFooter
